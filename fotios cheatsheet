///General Information
get system interface physical       #overview of hardware interfaces
get hardware nic <nic-name>         #details of a single network interface, same as: diagnose hardware deviceinfo nic <nic-name>
fnsysctl ifconfig <nic-name>        #kind of hidden command to see more interface stats such as errors
get system status                   #==show version
get system performance status       #CPU and network usage
diagnose sys top                    #top with all forked processed
diagnose sys top-summary            #top easier, incl. CPU and mem bars. Forks are displayed by [x13] or whatever
execute dhcp lease-list
diagnose ip arp list
diagnose ipv6 address list
diagnose ipv6 neighbor-cache list
diagnose sys ntp status
diagnose autoupdate versions        #lists the attack definition versions, last update, etc.
diagnose log test                   #generated all possibe log entries
diagnose test application dnsproxy 6    #shows the IP addresses of FQDN objects
diagnose debug crashlog read        #shows crashlog, a status of 0 indicates a normal close of a process!

///General Network Troubleshooting
execute ping-options ?
execute ping-options source <ip-address-of-the-interface>
execute ping <hostname|ip>
execute ping6-options ?
execute ping6 <hostname|ip>
execute traceroute <hostname|ip>
execute tracert6 <hostname|ip>

///Routing
get router info routing-table all   #routing table
get router info6 routing-table      #IPv6 without the "all" keyword
get router info kernel              #Forwarding Information Base
get router info6 kernel
get router <routing-protocol>       #basic information about the enabled routing protocol
diagnose firewall proute list       #policy-based routing
diagnose firewall proute6 list
diagnose ip rtcache list            #route cache = current sessions w/ routing information

///High Availability
diagnose sys ha status
execute ha manage ?                 #switch to the CLI of a secondary unit
execute ha manage <device-index>
diagnose sys ha showcsum            #verify the checksum of all synchronized peers


///Session Table
get system session list             #rough view with NAT, only IPv4
diagnose sys session filter clear
diagnose sys session filter ?
diagnose sys session filter dst 8.8.8.8
diagnose sys session filter dport 53
diagnose sys session list           #show the session table with the filter just set

///Sniffer
Sniff packets like tcpdump does. This can be used for investigating connection problems between two hosts. There are no details of the firewall policy decisions. Use the debug flow (next paragraph) for analysis about firewall policies, etc.
diagnose sniffer packet <interface|any> '<tcpdump-filter>' <verbose> <count> <time-format>


///Flow
If you want to see the FortiGate details about a connection, use this kind of debug. E.g., it shows the routing decision and the policy, which allowed the connection.
diagnose debug reset
diagnose debug flow filter ?
diagnose debug flow filter saddr 172.16.27.148
diagnose debug flow filter daddr 8.8.8.8
diagnose debug flow show console enable
diagnose debug enable
diagnose debug flow trace start 10  #display the next 10 packets, after that, disable the flow:
diagnose debug disable

///VPN
get vpn ike gateway <name>
get vpn ipsec tunnel name <name>
get vpn ipsec tunnel details
diagnose vpn tunnel list
diagnose vpn ipsec status           #shows all crypto devices with counters that are used by the VPN
get router info routing-table all
iagnose debug reset
diagnose vpn ike log-filter clear
diagnose vpn ike log-filter ?
diagnose vpn ike log-filter dst-addr4 1.2.3.4
diagnose debug app ike 255          #shows phase 1 and phase 2 output
diagnose debug enable               #after enough output, disable the debug:
diagnose debug disable

diag vpn tunnel reset <phase1 name>

Log
execute log filter reset
execute log filter category event
execute log filter field            #press enter for options
execute log filter field dstport 8001
execute log filter view-lines 1000
execute log filter start-line 1
execute log display


